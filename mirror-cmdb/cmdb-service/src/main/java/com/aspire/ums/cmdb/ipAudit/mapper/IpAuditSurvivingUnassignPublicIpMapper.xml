<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.aspire.ums.cmdb.ipAudit.mapper.IpAuditSurvivingUnassignPublicIpMapper" >
    <!-- 定义基础返回结果集 -->
    <resultMap id="resultMap" type="com.aspire.ums.cmdb.ipAudit.payload.IpAuditCommonResp" >
        <result column="id" property="id" jdbcType="VARCHAR" />
        <result column="ip" property="ip" jdbcType="VARCHAR" />
        <result column="check_time" property="checkTime" jdbcType="DATE" />
        <result column="processing_status" property="processingStatus" jdbcType="VARCHAR" />
        <result column="reason" property="reason" jdbcType="VARCHAR" />
        <result column="operator" property="operator" jdbcType="VARCHAR" />
        <result column="operating_time" property="operatingTime" jdbcType="DATE" />
        <result column="update_time" property="updateTime" jdbcType="DATE" />
        <result column="update_person" property="updatePerson" jdbcType="VARCHAR" />
    </resultMap>

    <!-- 定义列表返回结果集 -->
    <resultMap id="resultListMap" type="com.aspire.ums.cmdb.ipAudit.payload.UnassignPublicIpResp" >
        <result column="id" property="id" jdbcType="VARCHAR" />
        <result column="ip" property="ip" jdbcType="VARCHAR" />
        <result column="idcType" property="dc" jdbcType="VARCHAR" />
        <result column="check_time" property="checkTime" jdbcType="VARCHAR" />
        <result column="processing_status" property="processingStatus" jdbcType="VARCHAR" />
        <result column="reason" property="reason" jdbcType="VARCHAR" />
        <result column="operator" property="operator" jdbcType="VARCHAR" />
        <result column="operating_time" property="operatingTime" jdbcType="VARCHAR" />
        <result column="network_segment_name" property="networkName" jdbcType="VARCHAR" />
        <result column="public_segment_type" property="circuitType" jdbcType="VARCHAR" />
        <result column="addressUse" property="addressUse" jdbcType="VARCHAR" />
        <result column="first_business_system" property="businessName1" jdbcType="VARCHAR" />
        <result column="alone_business_system" property="businessName2" jdbcType="VARCHAR" />
        <result column="is_pool" property="idcManageFlag" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="reqParam">
        <if test="checkTimeBegin != null and checkTimeBegin != ''">
            AND a.check_time <![CDATA[>=]]> #{checkTimeBegin}
        </if>
        <if test="checkTimeEnd != null and checkTimeEnd != ''">
            AND a.check_time <![CDATA[<=]]> #{checkTimeEnd}
        </if>
        <if test="ips != null and ips.size() > 0">
            and
            <foreach collection="ips" item="ip" index="index" open="(" separator=" or " close=")">
                a.ip LIKE CONCAT('%', #{ip}, '%')
            </foreach>
        </if>
        <if test="dcList != null and dcList.size() > 0">
            AND c.`idcType` IN
            <foreach collection="dcList" item="item" index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="networkName != null and networkName != ''">
            AND c.`network_segment_name` LIKE CONCAT('%',#{networkName},'%')
        </if>
        <if test="idcManageFlag != null and idcManageFlag != ''">
            AND c.`is_pool` = #{idcManageFlag}
        </if>
        <if test="circuitType != null and circuitType != ''">
            AND c.`public_segment_type` LIKE CONCAT('%',#{circuitType},'%')
        </if>
        <if test="addressUse != null and addressUse != ''">
            AND b.`public_segment_use` LIKE CONCAT('%',#{addressUse},'%')
        </if>
        <if test="businessName1 != null and businessName1 != ''">
            AND c.`first_business_system` = #{businessName1}
        </if>
        <if test="businessName2 != null and businessName2 != ''">
            AND c.`alone_business_system` = #{businessName2}
        </if>
        <if test="processingStatus != null and processingStatus != ''">
            AND a.`processing_status` = #{processingStatus}
        </if>
        <if test="operatingTimeBegin != null and operatingTimeBegin != ''">
            AND a.operating_time <![CDATA[>=]]> #{operatingTimeBegin}
        </if>
        <if test="operatingTimeEnd != null and operatingTimeEnd != ''">
            AND a.operating_time <![CDATA[<=]]> #{operatingTimeEnd}
        </if>
        <if test="reason != null and reason != ''">
            AND a.`reason` LIKE CONCAT('%',#{reason},'%')
        </if>
        <if test="operator != null and operator != ''">
            AND a.`operator` LIKE CONCAT('%',#{operator},'%')
        </if>
    </sql>

    <sql id="publicQueryTable">
        SELECT a.id,a.ip,DATE_FORMAT(a.check_time,'%Y-%m-%d %T') AS check_time,a.reason,a.operator,
        DATE_FORMAT(a.operating_time,'%Y-%m-%d %T') AS operating_time,a.processing_status,
        CASE a.processing_status
        WHEN '0' THEN '待处理' WHEN '1' THEN '暂不处理'
        WHEN '2' THEN '处理中' WHEN '3' THEN '已处理'
        ELSE a.processing_status END processingStatusDesc,
        c.network_segment_name,
        IFNULL(d.dict_note, c.idcType) AS idcType,
        IFNULL(d2.dict_note, c.public_segment_type) AS public_segment_type,
        IFNULL(d3.dict_note, b.public_segment_use) AS addressUse,
        IFNULL(d4.orgName, c.first_business_system) AS first_business_system,
        IFNULL(d5.business_name, c.alone_business_system) AS alone_business_system,
        IFNULL(d6.dict_note, c.is_pool) AS is_pool,
        b.id AS ipId,c.id AS segmentId
        FROM ip_audit_surviving_unassign_publicip a
        LEFT JOIN cmdb_ip_repository_public_ip b ON b.ip = a.ip
        LEFT JOIN cmdb_ip_repository_public_segment c ON c.public_segment_address = b.public_segment_owner
        LEFT JOIN t_cfg_dict d ON c.idcType = d.id AND d.col_name = 'idcType2'
        LEFT JOIN t_cfg_dict d2 ON c.public_segment_type = d2.id AND d2.col_name = 'public_segment_line_type'
        LEFT JOIN t_cfg_dict d3 ON b.public_segment_use = d3.id AND d3.col_name = 'public_segment_use'
        LEFT JOIN (
        SELECT id, orgName
            FROM (
            SELECT tt.*,`ref_tb_parent_id`.`orgName` `parent_id_orgName_name`
            FROM (
            SELECT *
            FROM (
            SELECT `org_system`.`remark`,`org_system`.`parent_id`,`org_system`.`orgType`,`org_system`.`orgName`,`dict`.`insert_person`,`dict`.`dict_type`,`dict`.`module_id`,`dict`.`update_person`,`dict`.`insert_time`,`dict`.`id`,`dict`.`update_time`
            FROM cmdb_org_system `org_system`
            INNER JOIN cmdb_dict `dict` ON (`dict`.`id` = `org_system`.`id` AND `dict`.`is_delete` = 0)
            INNER JOIN cmdb_module `cm` ON dict.module_id = cm.id
            WHERE org_system.`is_delete` = 0 AND cm.`code` = 'org_system') t
            WHERE 1=1 AND parent_id != '0') tt
            LEFT JOIN cmdb_org_system ref_tb_parent_id ON (`tt`.`parent_id`=`ref_tb_parent_id`.`id` AND `ref_tb_parent_id`.`is_delete` = '0')) res
        ) d4 ON c.first_business_system = d4.id
        LEFT JOIN cmdb_business_line d5 ON c.alone_business_system = d5.id
        LEFT JOIN t_cfg_dict d6 ON c.is_pool = d6.id AND d6.col_name = 'whether'
    </sql>

    <sql id="getPublicIpOneSql">
        INNER JOIN cmdb_ip_repository rs ON rs.module_id = (SELECT id FROM cmdb_module WHERE `code` = 'ip_repository_public_segment')
        AND rs.is_delete = 0 AND rs.id = t.segmentId
        INNER JOIN cmdb_ip_repository ri ON ri.module_id = (SELECT id FROM cmdb_module WHERE `code` = 'ip_repository_public_ip')
        AND ri.is_delete = 0 AND ri.id = t.ipId
    </sql>

    <!-- list查询 -->
    <select id="list" resultMap="resultMap">
        SELECT
        `id`,
        `ip`,
        `check_time`,
        `processing_status`,
        `reason`,
        `operator`,
        `operating_time`,
        `check_num`,
        `is_delete`,
        `update_time`,
        `update_person`
        FROM ip_audit_surviving_unassign_publicip
    </select>

    <!-- list查询 -->
    <select id="listByEntity" resultMap="resultListMap" parameterType="com.aspire.ums.cmdb.ipAudit.payload.UnassignPublicIpReq">
        SELECT * FROM
        (
            <include refid="publicQueryTable"/>
            <where>
                <include refid="reqParam" />
            </where>
        ) t
        <include refid="getPublicIpOneSql" />
        <if test="pageNo != null and pageSize != null">
            LIMIT #{pageNo},#{pageSize}
        </if>
    </select>

    <select id="getListCount" resultType="java.lang.Integer" parameterType="com.aspire.ums.cmdb.ipAudit.payload.UnassignPublicIpReq">
        SELECT
        COUNT(*) AS totalCount
        FROM (
        <include refid="publicQueryTable" />
        <where>
            <include refid="reqParam" />
        </where>
        ) t
        <include refid="getPublicIpOneSql"/>
    </select>

    <!-- Get one 查询 -->
    <select id="get" parameterType="com.aspire.ums.cmdb.ipAudit.payload.UnassignPublicIpReq" resultMap="resultMap">
        SELECT
        `id`,
        `ip`,
        `check_time`,
        `processing_status`,
        `reason`,
        `operator`,
        `operating_time`,
        `check_num`,
        `is_delete`,
        `update_time`,
        `update_person`
        FROM ip_audit_surviving_unassign_publicip
        WHERE `id` = #{id}
    </select>

    <!-- 新增记录 -->
    <insert id="insert" parameterType="com.aspire.ums.cmdb.ipAudit.entity.IpAuditSurvivingUnassignPublicIp">
        INSERT INTO ip_audit_surviving_unassign_publicip
        (
            `id`,
            `ip`,
            `check_time`,
            `processing_status`,
            `reason`,
            `operator`,
            `operating_time`,
            `check_num`,
            `is_delete`,
            `update_time`,
            `update_person`
        ) VALUES (
            #{id, jdbcType=VARCHAR},
            #{ip, jdbcType=VARCHAR},
            #{checkTime, jdbcType=DATE},
            #{processingStatus, jdbcType=VARCHAR},
            #{reason, jdbcType=VARCHAR},
            #{operator, jdbcType=VARCHAR},
            #{operatingTime, jdbcType=DATE},
            #{checkNum, jdbcType=TINYINT},
            #{isDelete, jdbcType=TINYINT},
            #{updateTime, jdbcType=DATE},
            #{updatePerson, jdbcType=VARCHAR}
        )
    </insert>

    <!-- 修改记录 -->
    <update id="update" parameterType="com.aspire.ums.cmdb.ipAudit.entity.IpAuditSurvivingUnassignPublicIp">
        UPDATE ip_audit_surviving_unassign_publicip SET
        `ip` = #{ip},
        `check_time` = #{checkTime},
        `processing_status` = #{processingStatus},
        `reason` = #{reason},
        `operator` = #{operator},
        `operating_time` = #{operatingTime},
        `check_num` = #{checkNum},
        `is_delete` = #{isDelete},
        `update_time` = #{updateTime},
        `update_person` = #{updatePerson}
        WHERE `id` = #{id}
    </update>

    <!-- 删除记录 -->
    <delete id="delete" parameterType="com.aspire.ums.cmdb.ipAudit.entity.IpAuditSurvivingUnassignPublicIp">
        DELETE FROM ip_audit_surviving_unassign_publicip
        WHERE `id` = #{id}
    </delete>

    <!-- 批量新增记录 -->
    <insert id="batchInsertIp" parameterType="com.aspire.ums.cmdb.ipAudit.entity.IpAuditSurvivingUnassignPublicIp">
        INSERT INTO ip_audit_surviving_unassign_publicip
        (
            `id`,
            `ip`,
            `check_time`,
            `processing_status`,
            `reason`,
            `operator`,
            `operating_time`,
            `check_num`,
            `is_delete`,
            `update_time`,
            `update_person`
        ) VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.id, jdbcType=VARCHAR},
            #{item.ip, jdbcType=VARCHAR},
            NOW(),
            #{item.processingStatus, jdbcType=VARCHAR},
            #{item.reason, jdbcType=VARCHAR},
            #{item.operator, jdbcType=VARCHAR},
            NOW(),
            #{item.checkNum, jdbcType=TINYINT},
            #{item.isDelete, jdbcType=TINYINT},
            #{item.updateTime, jdbcType=DATE},
            #{item.updatePerson, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <!--列表顶部总数查询逻辑-->
    <select id="getStatisticsData" parameterType="com.aspire.ums.cmdb.ipAudit.payload.UnassignPublicIpReq" resultType="java.util.HashMap">
        SELECT
        COUNT(IF(t.processing_status = '待处理', TRUE, NULL)) AS numOfToBeProcessedIp,
        COUNT(IF(t.processing_status = '暂不处理', TRUE, NULL)) AS numOfNotProcessIp,
        COUNT(t.ip) AS numOfUnPlanIp
        FROM
        (
        <include refid="publicQueryTable" />
        <where>
            <include refid="reqParam" />
        </where>
        ) t
        <include refid="getPublicIpOneSql"/>
    </select>

    <!-- 查询公网ip地址库获取录入IP管理的IP 新增 fanwenhui 20200527 -->
    <select id="getIpRepositoryPublicIps" resultType="java.util.Map">
        SELECT DISTINCT CONCAT(a.ip,'-', b.idcType) AS ipIdc,request_person AS requestPerson,assign_status AS assignStatus,
        a.ip
        FROM cmdb_ip_repository_public_ip a
        INNER JOIN cmdb_ip_repository_public_segment b ON b.public_segment_address = a.public_segment_owner
        INNER JOIN cmdb_ip_repository rs ON rs.module_id = (SELECT id FROM cmdb_module WHERE `code` = 'ip_repository_public_segment')
        AND rs.is_delete = 0 AND rs.id = b.id
        INNER JOIN cmdb_ip_repository ri ON ri.module_id = (SELECT id FROM cmdb_module WHERE `code` = 'ip_repository_public_ip')
        AND ri.is_delete = 0 AND ri.id = a.id
--         INNER JOIN config_dict c ON c.`VALUE` = b.idcType
        WHERE a.is_delete = 0 AND b.is_delete = 0
--         AND c.TYPE = 'idcType' AND c.DELETE_FLAG = 0
    </select>

    <update id="updateProcess" parameterType="com.aspire.ums.cmdb.ipAudit.payload.IpAuditUpdateRequest">
        update
        <choose>
            <when test='opIpType == "pubIp1"'>
                `ip_audit_surviving_unplanned_publicip`
            </when>
            <when test='opIpType == "pubIp2"'>
                `ip_audit_surviving_unassign_publicip`
            </when>
        </choose>
        <set>
            `processing_status` = #{handleStatus},
            `reason` = #{notHandleReason},
            <if test="operator != null and operator != ''">
                `operator` = #{operator},
                `update_person` = #{operator},
            </if>
            `update_time` = NOW(),
            `operating_time` = NOW()
        </set>
        where `id` in
        <foreach collection="mainId" item="id" index="index" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!-- IP登记：根据公网IP地址库的主键进行修改 新增 fanwenhui 20200608 -->
    <update id="updatePublicIpInfo" parameterType="com.aspire.ums.cmdb.ipAudit.payload.IpAuditUpdateRequest">
        UPDATE cmdb_ip_repository_public_ip
        <set>
            <if test=" requestPerson != null and requestPerson != ''">
                request_person = #{requestPerson},
            </if>
            <if test=" requestTime != null and requestTime != ''">
                request_time = #{requestTime},
            </if>
            <if test=" requestOrder != null and requestOrder != ''">
                request_process_id = #{requestOrder},
            </if>
            <if test=" expirationDate != null and expirationDate != ''">
                useful_life = #{expirationDate},
            </if>
        </set>
        <where>
            id IN
            <foreach collection="ipIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </update>

    <!-- IP登记：根据公网网段的的主键进行修改 新增 fanwenhui 20200608 -->
    <update id="updatePublicSegmentInfo" parameterType="com.aspire.ums.cmdb.ipAudit.payload.IpAuditUpdateRequest">
        UPDATE cmdb_ip_repository_public_segment
        <set>
            <if test=" businessId1 != null and businessId1 != ''">
                first_business_system = #{businessId1},
            </if>
            <if test=" businessName1 != null and businessName1 != ''">
                first_business_system = #{businessName1},
            </if>
            <if test=" businessId2 != null and businessId2 != ''">
                alone_business_system = #{businessId2},
            </if>
            <if test=" businessName2 != null and businessName2 != ''">
                alone_business_system = #{businessName2},
            </if>
            <if test=" ipUse != null and ipUse != ''">
                public_segment_use = #{ipUse},
            </if>
        </set>
        <where>
            id IN
            <foreach collection="segmentIds" item="item" index="index" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </update>

    <!-- 获取最大检查次数 -->
    <select id="getMaxCheckNum" resultType="java.lang.Long">
        SELECT MAX(check_num) FROM ip_audit_surviving_unassign_publicip
    </select>

    <!-- 批量更新公网IP地址库的分配状态 -->
    <update id="batchUpdatePublicIpStatus" parameterType="java.util.List">
        UPDATE cmdb_ip_repository_public_ip SET assign_status =
        (SELECT id FROM t_cfg_dict WHERE col_name = 'ipAllocationStatusType' AND dict_note = '已分配' AND is_delete = '0' LIMIT 1),
        assign_user = 'IP稽核',assign_time = NOW()
        WHERE ip IN
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>

</mapper>