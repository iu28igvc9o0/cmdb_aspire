package com.migu.tsg.microservice.atomicservice.composite.controller.util.service.impl;

import com.alibaba.druid.support.logging.Log;
import com.alibaba.druid.support.logging.LogFactory;
import com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstance;
import com.aspire.mirror.ops.api.domain.vulnerability.VulReportDetailItem;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPReply;
import org.mockito.internal.util.io.IOUtil;
import sun.misc.IOUtils;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

@Slf4j
public class VulnerabilityFtpService {

//    private static final Log log = LogFactory.getLog(VulnerabilityFtpService.class);
    public static void download(String host, int port, String username, String password, String scanCycle, String pool, String targetDir, List<VulReportDetailItem> instanceList) throws Exception {
        FTPClient ftpClient = new FTPClient();
        OutputStream os = null;
        OutputStream os2 = null;
        // 登录ftp
        try {
            ftpClient.connect(host, port);
            ftpClient.login(username, password);
            ftpClient.setBufferSize(1024);//设置上传缓存大小
            ftpClient.setControlEncoding("UTF-8");//设置编码
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);//设置文件类型
            ftpClient.enterLocalPassiveMode();
            for (VulReportDetailItem instance : instanceList) {
                log.info("begin download vulnerability file, ip is " + instance.getIp()+ ", time is " + System.currentTimeMillis());
                String targetIp = instance.getIp();
                // 下载文件到指定目录
                String ftpFilePath = MessageFormat.format("/targetVul/{0}/{1}/{2}/", scanCycle, pool, targetIp);
                boolean flag = ftpClient.changeWorkingDirectory(ftpFilePath);
                if (flag) {
                    try {
                        File targetFile = new File(targetDir + File.separator + targetIp + ".html");
                        os = new FileOutputStream(targetFile);
                        ftpClient.retrieveFile(targetIp + ".html", os);
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        IOUtil.closeQuietly(os);
                    }
                    boolean flag2 = ftpClient.changeWorkingDirectory("files");
                    if (flag2) {
                        try {
                            File mainFile = new File(targetDir + "/files/" + targetIp + "_main.html");
                            if (!mainFile.exists()) {
                                mainFile.createNewFile();
                            }
                            File treeFile = new File(targetDir + "/files/" + targetIp + "_tree.html");
                            if (!treeFile.exists()) {
                                treeFile.createNewFile();
                            }
                            os = new FileOutputStream(mainFile);
                            os2 = new FileOutputStream(treeFile);
                            ftpClient.retrieveFile(targetIp + "_main.html", os);
                            ftpClient.retrieveFile(targetIp + "_tree.html", os2);
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                                IOUtil.closeQuietly(os);
                                IOUtil.closeQuietly(os2);
                        }

                    }
                }
                log.info("end download vulnerability file, ip is " + instance.getIp() + ", time is " + System.currentTimeMillis());
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (ftpClient.isConnected()) {
                try {
                    ftpClient.disconnect();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
    }

    public static String upload(String host, int port, String username, String password, String fileName, String scanCycle, InputStream input, String filePath) {
        String result = null;
        Date date = new Date();
        DateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
//        String filePath = "/download" + df.format(date);

        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(host, port);// 连接FTP服务器
            ftp.login(username, password);// 登录
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                return null;
            }
            // 切换到上传目录
            if (!ftp.changeWorkingDirectory(filePath)) {
                // 如果目录不存在创建目录
                String[] dirs = filePath.split("/");
                String tempPath = "";
                for (String dir : dirs) {
                    if (null == dir || dir.isEmpty())
                        continue;
                    tempPath += "/" + dir;
                    if (!ftp.changeWorkingDirectory(tempPath)) {
                        if (!ftp.makeDirectory(tempPath)) {
                            return result;
                        } else {
                            ftp.changeWorkingDirectory(tempPath);
                        }
                    }
                }
            }
            // 设置上传文件的类型为二进制类型
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            // 上传文件
            String[] fileNames = fileName.split("\\.");
            String formalName = UUID.randomUUID().toString() + "_" + fileNames[0].hashCode() + "_" + df.format(date) + "_scanCycle" + scanCycle;
            if (fileNames.length >= 2) {
                formalName = new String((formalName + "." + fileNames[fileNames.length - 1]).getBytes("GBK"), StandardCharsets.ISO_8859_1);
            }
            if (!ftp.storeFile(formalName, input)) {
                return result;
            }
            input.close();
            ftp.logout();
            result = filePath + "/" + formalName;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        }
        return result;
    }
}
