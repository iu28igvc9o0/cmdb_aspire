package com.migu.tsg.microservice.atomicservice.composite.controller.opsmanage;

import com.aspire.mirror.composite.service.opsmanage.ICompOpsVulnerabilityGroupService;
import com.aspire.mirror.ops.api.domain.GeneralResponse;
import com.aspire.mirror.ops.api.domain.PageListQueryResult;
import com.aspire.mirror.ops.api.domain.vulnerability.VulnerabilityGroup;
import com.aspire.mirror.ops.api.domain.vulnerability.VulnerabilityGroupQueryModel;
import com.migu.tsg.microservice.atomicservice.composite.clientservice.opsmanage.VulnerabilityGroupClient;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * TODO
 * <p>
 * 项目名称:  mirror平台
 * 包:        com.migu.tsg.microservice.atomicservice.composite.controller.opsmanage
 * 类名称:    CompOpsVulnerabilityGroupController.java
 * 类描述:    TODO
 * 创建人:    JinSu
 * 创建时间:  2020/7/8 11:33
 * 版本:      v1.0
 */
@Slf4j
@RestController
public class CompOpsVulnerabilityGroupController implements ICompOpsVulnerabilityGroupService {
    @Autowired
    private VulnerabilityGroupClient vulnerabilityGroupClient;
    @Override
    public PageListQueryResult<VulnerabilityGroup> queryVulnerabilityGroupList(@RequestBody VulnerabilityGroupQueryModel queryParam) {
        return vulnerabilityGroupClient.queryVulnerabilityGroupList(queryParam);
    }

    @Override
    public GeneralResponse saveVulnerabilityGroup(@RequestBody VulnerabilityGroup vulnerabilityGroup) {
        return vulnerabilityGroupClient.saveVulnerabilityGroup(vulnerabilityGroup);
    }

    @Override
    public VulnerabilityGroup getVulnerabilityGroup(@RequestParam("vulnerabilityGroupId") Long vulnerabilityGroupId) {
        return vulnerabilityGroupClient.getVulnerabilityGroup(vulnerabilityGroupId);
    }

    @Override
    public GeneralResponse removeVulnerabilityGroup(@RequestParam("vulnerabilityGroupId") Long vulnerabilityGroupId) {
        return vulnerabilityGroupClient.removeVulnerabilityGroup(vulnerabilityGroupId);
    }
}
