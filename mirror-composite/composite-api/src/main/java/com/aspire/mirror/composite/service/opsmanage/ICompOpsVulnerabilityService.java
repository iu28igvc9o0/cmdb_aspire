package com.aspire.mirror.composite.service.opsmanage;

import com.aspire.mirror.common.entity.PageResponse;
import com.aspire.mirror.ops.api.domain.GeneralResponse;
import com.aspire.mirror.ops.api.domain.PageListQueryResult;
import com.aspire.mirror.ops.api.domain.vulnerability.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * @projectName: ICompOpsVulnerabilityService
 * @description: 接口
 * @author: luowenbo
 * @create: 2020-07-09 15:52
 **/
@Api("漏洞管理")
@RequestMapping(value = "/v1/ops-service/vulnerability")
public interface ICompOpsVulnerabilityService {

    @PostMapping(value = "/queryVulnerabilityList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查询漏洞列表", notes = "查询漏洞列表", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = PageListQueryResult.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    PageListQueryResult<OpsVulnerability> queryVulnerabilityList(@RequestBody OpsVulnerabilityQueryModel queryParam);

    @GetMapping(value = "/queryVulnerabilityById", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "通过Id,查询特定漏洞", notes = "通过Id,查询特定漏洞", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = OpsVulnerability.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    OpsVulnerability getVulnerabilityById(@RequestParam("vulnerabilityId") String vulId);

    @PutMapping(value = "/updateVulnerability", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "修改漏洞信息", notes = "修改漏洞信息", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse updateVulnerability(@RequestBody OpsVulnerability vul);

    @GetMapping(value = "/riskLevelList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查询危险等级列表", notes = "查询危险等级列表", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    List<Object> getRiskLevelList();

    @PostMapping(value = "/queryVulInstanceList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查询漏洞实例列表", notes = "查询漏洞实例列表", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = PageListQueryResult.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    PageListQueryResult<OpsVulnerabilityInstance> queryVulnerabilityInstanceList(@RequestBody OpsVulnerabilityInstanceQueryModel queryParam);

    @PostMapping(value = "/exportVulInstance", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导出漏洞实例列表", notes = "导出漏洞实例列表", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void exportVulInstance(@RequestBody OpsVulnerabilityInstanceQueryModel queryParam, HttpServletResponse response);

    @PostMapping(value = "/exportVulInstanceDetail", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导出漏洞实例详细列表", notes = "导出漏洞实例详细列表", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void exportVulInstanceDetail(@RequestBody OpsVulnerabilityInstanceQueryModel queryParam, HttpServletResponse response);


    @PutMapping(value = "/updateVulInstance", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "修改漏洞实例信息", notes = "修改漏洞实例信息", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse updateVulInstance(@RequestBody OpsVulnerabilityInstance vulInstance);

    @PutMapping(value = "/executeVulnerabilityRepair/{vulInstanceId}/{pipelineId}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "执行漏洞修复作业", notes = "执行漏洞修复作业", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse executeVulnerabilityRepair(@PathVariable("vulInstanceId") Long vulInstanceId,
                                               @PathVariable("pipelineId") Long pipelineId);

    @PutMapping(value = "/executeVulnerabilityGoBack/{vulInstanceId}/{pipelineId}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "执行漏洞回退作业", notes = "执行漏洞回退作业", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse executeVulnerabilityGoBack(@PathVariable("vulInstanceId") Long vulInstanceId,
                                                      @PathVariable("pipelineId") Long pipelineId);

    @GetMapping(value = "/downloadVulnerabilityTemplate", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "下载漏洞修复手册模板", notes = "下载漏洞修复手册模板", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void downloadVulnerabilityTemplate(HttpServletResponse response);

    @PostMapping(value = "/importVulnerability", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "excel导入漏洞修复手册", notes = "excel导入漏洞修复手册", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "成功")})
    ResponseEntity<String> importVulnerability(@RequestParam("file") MultipartFile file);

    @PostMapping(value = "/exportVulnerability", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导出漏洞列表", notes = "导出漏洞列表", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void exportVulnerability(@RequestBody OpsVulnerabilityQueryModel queryParam, HttpServletResponse response);

    @PostMapping(value = "/saveVulnerability", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "创建漏洞信息", notes = "创建漏洞信息", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse saveVulnerability(@RequestBody OpsVulnerability vul);

    @PostMapping(value = "/saveVulnerabilityInstance", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "创建漏洞实例信息", notes = "创建漏洞实例信息", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse saveVulnerabilityInstance(@RequestBody OpsVulnerabilityInstance vul);

    @PostMapping(value = "/vulnerabilityReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查询漏洞报告", notes = "查询漏洞报告", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    List<OpsVulnerabilityReportItem> vulnerabilityReport(@RequestBody OpsVulnerabilityReportQuery queryParam);

    @PostMapping(value = "/importVulnerabilityReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导入漏洞报告", notes = "导入漏洞报告", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse importVulnerabilityReport(@RequestParam("idcType") String idcType, @RequestParam("scanCycle") String scanCycle,  @RequestParam("reportType") String reportType, @RequestParam MultipartFile file);

    @GetMapping(value = "/getScanCycleList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "获取周期列表", notes = "获取周期列表", response = OpsVulScanCycle.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = OpsVulScanCycle.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    List<OpsVulScanCycle> getScanCycleList();

    @GetMapping(value = "/getVulnerabilityInstanceDetailById", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "获取漏洞实例详情", notes = "获取漏洞实例详情", response = Map.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = Map.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    public OpsVulnerabilityInstanceDetail getVulnerabilityInstanceDetailById(@RequestParam("vulInstanceId") Long vulInstanceId);

    @PutMapping(value = "/batchExecuteVulnerabilityRepair", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "批量执行漏洞修复作业", notes = "批量执行漏洞修复作业", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse batchExecuteVulnerabilityRepair(@RequestBody BatchExecuteVulnerabilityReqModel execVulModel);

    @PostMapping(value = "/exportVulnerabilityReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导出漏洞报告", notes = "导出漏洞报告", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void exportVulnerabilityReport(@RequestBody OpsVulnerabilityReportQuery queryParam, HttpServletResponse response);

    @PostMapping(value = "/saveVulScanCycle", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "保存漏洞周期", notes = "保存漏洞周期", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse saveVulScanCycle(@RequestBody OpsVulScanCycle opsVulScanCycle);

    @PostMapping(value = "/downloadSourceReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "下载原始报告", notes = "下载原始报告", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void downloadSourceReport(@RequestBody OpsVulnerabilityReportQuery queryParam, HttpServletResponse response);

    @PostMapping(value = "/queryVulReportDetailStatistics", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查看漏洞报告详情统计", notes = "查看漏洞报告详情统计", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    List<VulReportDetailStatistics> queryVulReportDetailStatistics(@RequestBody OpsVulNewReportQuery queryParam);

    @PostMapping(value = "/queryVulReportItemList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查看漏洞报告元素列表", notes = "查看漏洞报告元素列表", tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回"),
            @ApiResponse(code = 500, message = "Unexpected error")})
    PageListQueryResult<VulReportDetailItem> queryVulReportItemList(@RequestBody OpsVulNewReportQuery queryParam);

    @PostMapping(value = "/vulNewReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "新漏洞报告获取", notes = "新漏洞报告获取", response = OpsVulnerabilityReportItem.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = OpsVulnerabilityReportItem.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    PageListQueryResult<OpsVulnerabilityNewReportItem> vulNewReport(@RequestBody OpsVulNewReportQuery queryParam);


    @PutMapping(value = "/executeVulnerabilityRecheck/{vulInstanceId}/{pipelineId}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "执行漏洞复查作业", notes = "执行漏洞复查作业", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse executeVulnerabilityRecheck(@PathVariable("vulInstanceId") Long vulInstanceId,
                                               @PathVariable("pipelineId") Long pipelineId);


    @PostMapping(value = "/exportVulNewReport", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "导出漏洞报表", notes = "导出漏洞报表", response = OpsVulnerabilityReportItem.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = OpsVulnerabilityReportItem.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    void exportVulNewReport(@RequestBody OpsVulNewReportQuery queryParam, HttpServletResponse response);
}
