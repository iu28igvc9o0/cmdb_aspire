package com.aspire.mirror.composite.service.opsmanage;

import com.aspire.mirror.ops.api.domain.GeneralResponse;
import com.aspire.mirror.ops.api.domain.PageListQueryResult;
import com.aspire.mirror.ops.api.domain.SensitiveConfig;
import com.aspire.mirror.ops.api.domain.vulnerability.VulnerabilityGroup;
import com.aspire.mirror.ops.api.domain.vulnerability.VulnerabilityGroupQueryModel;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * TODO
 * <p>
 * 项目名称:  mirror平台
 * 包:        com.aspire.mirror.ops.api.service
 * 类名称:    ICompOpsVulnerabilityGroupService.java
 * 类描述:    TODO
 * 创建人:    JinSu
 * 创建时间:  2020/7/7 15:50
 * 版本:      v1.0
 */
@Api("漏洞分组管理")
@RequestMapping(value = "/v1/ops-service/vulnerabilityGroup")
public interface ICompOpsVulnerabilityGroupService {
    @PostMapping(value = "/queryVulnerabilityGroupList", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "查询列表", notes = "查询列表", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = PageListQueryResult.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    PageListQueryResult<VulnerabilityGroup> queryVulnerabilityGroupList(@RequestBody VulnerabilityGroupQueryModel queryParam);

    @PostMapping(value = "/saveVulnerabilityGroup", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "保存漏洞分组", notes = "保存漏洞分组", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse saveVulnerabilityGroup(@RequestBody VulnerabilityGroup vulnerabilityGroup);

    @GetMapping(value = "/getVulnerabilityGroup", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "根据id查询漏洞分组", notes = "根据id查询漏洞分组", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = SensitiveConfig.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    VulnerabilityGroup getVulnerabilityGroup(@RequestParam("vulnerabilityGroupId") Long vulnerabilityGroupId);


    @DeleteMapping(value = "/removeVulnerabilityGroup", produces = MediaType.APPLICATION_JSON_VALUE)
    @ApiOperation(value = "删除漏洞分组", notes = "删除漏洞分组", response = GeneralResponse.class, tags = {"vulnerability service API"})
    @ApiResponses(value = {@ApiResponse(code = 200, message = "返回", response = GeneralResponse.class),
            @ApiResponse(code = 500, message = "Unexpected error")})
    GeneralResponse removeVulnerabilityGroup(@RequestParam("vulnerabilityGroupId") Long vulnerabilityGroupId);

}
