/**
 * 
 */
package com.migu.tsg.microservice.atomicservice.rbac.controller;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.apache.logging.log4j.util.PropertiesUtil;
import org.junit.FixMethodOrder;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.migu.tsg.microservice.atomicservice.rbac.dto.CreateOrgAccountRequest;
import com.migu.tsg.microservice.atomicservice.rbac.dto.CreateOrgAccountResponse;
import com.migu.tsg.microservice.atomicservice.rbac.dto.InsertRoleRequest;
import com.migu.tsg.microservice.atomicservice.rbac.dto.InsertRoleResponse;
import com.migu.tsg.microservice.atomicservice.rbac.dto.UpdateOrgRequest;
import com.migu.tsg.microservice.atomicservice.rbac.dto.UpdateSubAccountPasswordRequest;
import com.migu.tsg.microservice.atomicservice.rbac.dto.model.AccountRoleDTO;
import com.migu.tsg.microservice.atomicservice.rbac.dto.model.FileUpload;
import com.migu.tsg.microservice.atomicservice.rbac.dto.model.InsertAccountDTO;

/**
* 项目名称: rbac-service <br>
* 包: com.migu.tsg.microservice.atomicservice.rbac.controller <br>
* 类名称: OrgsControllerTest.java <br>
* 类描述: <br>
* 创建人: WangSheng <br>
* 创建时间: 2017年10月23日下午8:49:13 <br>
* 版本: v1.0
*/
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
@Ignore
public class OrgsControllerTest {

    @Autowired
    private RoleController roleController;

    @Autowired
    private OrgsController orgsController;

    /**
     * 根账号(LDAP初始化必须存在此NAMESPACE)
     * 提示：目前LDAP初始化必须存在此NAMESPACE,后期可以实现ldap对于NAMESPACE的新增和删除接口,
     *      单元测试前(@Before)新增NAMESPACE,单元测试后(@After)删除NAMESPACE
     */
    private static final String NAMESPACE = "migu";

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#updateSubAccountPassword(com.migu.tsg.microservice.atomicservice.rbac.dto.UpdateSubAccountPasswordRequest, java.lang.String, java.lang.String)}.
     */
    @Test
    public final void testUpdateSubAccountPassword() {
        List<CreateOrgAccountResponse> createOrgAccount = createOrgAccount();
        // Admin updating other users
        String password = PropertiesUtil.getProperties().getStringProperty("PASSWORD");
        password = password == null ? "123456":password;
        String json = "{\"password\": " + password + "}";
        UpdateSubAccountPasswordRequest request = new Gson().fromJson(json,
                UpdateSubAccountPasswordRequest.class);
        orgsController.updateSubAccountPassword(request, NAMESPACE, createOrgAccount.get(0).getUsername());
        // Subaccounts updating own password
        json = "{\"password\": " + password + ",\"old_password\": " + password + "}";
        request = new Gson().fromJson(json, UpdateSubAccountPasswordRequest.class);
        orgsController.updateSubAccountPassword(request, NAMESPACE, createOrgAccount.get(0).getUsername());
        removeOrgAccount(createOrgAccount.get(0).getUsername());
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#removeOrgAccount(java.lang.String, java.lang.String)}.
     */
    @Test
    public final void testRemoveOrgAccount() {
        removeOrgAccount(createOrgAccount().get(0).getUsername());
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#updateOrg(com.migu.tsg.microservice.atomicservice.rbac.dto.UpdateOrgRequest, java.lang.String)}.
     */
    @Test
    public final void testUpdateOrg() {
        String json = "{\"company\": \"Migu, inc\"}";
        UpdateOrgRequest request = new Gson().fromJson(json, UpdateOrgRequest.class);
        orgsController.updateOrg(request, NAMESPACE);
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#getOrgDetail(java.lang.String)}.
     */
    @Test
    public final void testGetOrgDetail() {
        orgsController.getOrgDetail(NAMESPACE);
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#getOrgUserDetail(java.lang.String, java.lang.String)}.
     */
    @Test
    public final void testGetOrgUserDetail() {
        List<CreateOrgAccountResponse> createOrgAccount = createOrgAccount();
        String username = createOrgAccount.get(0).getUsername();
        orgsController.getOrgUserDetail(NAMESPACE, username);
        removeOrgAccount(username);
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#createOrgAccount(com.migu.tsg.microservice.atomicservice.rbac.dto.CreateOrgAccountRequest, java.lang.String)}.
     */
    @Test
    public final void testCreateOrgAccount() {
        List<CreateOrgAccountResponse> createOrgAccount = createOrgAccount();
        removeOrgAccount(createOrgAccount.get(0).getUsername());
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#listOrgAccounts(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, int)}.
     */
    @Test
    public final void testListOrgAccounts() {
        List<CreateOrgAccountResponse> createOrgAccount = createOrgAccount();
        String username = createOrgAccount.get(0).getUsername();
        orgsController.listOrgAccounts(NAMESPACE, null, null, username, null, 20, 1);
        removeOrgAccount(username);
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#listAccountRoles(java.lang.String, java.lang.String)}.
     */
    @Test
    public final void testListAccountRoles() {
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#deleteAccountRoles(java.lang.String, java.lang.String, java.lang.String, java.lang.String)}.
     */
    @Test
    public final void testDeleteAccountRoles() {
    }

    /**
     * Test method for {@link com.migu.tsg.microservice.atomicservice.rbac.controller.OrgsController#fileUpload(com.migu.tsg.microservice.atomicservice.rbac.dto.model.FileUpload, java.lang.String)}.
     */
    @Test
    public final void testFileUpload() {
        String json = "{\"logoFile\": \"image/png;base64,\"}";
        FileUpload request = new Gson().fromJson(json, FileUpload.class);
        orgsController.fileUpload(request, NAMESPACE);
    }

    /**
     * 新增角色
     * @return
     */
    private List<InsertRoleResponse> insertRoles() {
        String json = "[{\"name\":\"test-insert-role-name\",\"namespace\":\"" + NAMESPACE
                + "\",\"permissions\":[{\"resource\":[\"*\"],\"actions\":[\"service:*\"],\"constraints\":[{\"res:cluster\":\"dev\"}]}]}]";
        List<InsertRoleRequest> request = new Gson().fromJson(json, new TypeToken<List<InsertRoleRequest>>() {
            private static final long serialVersionUID = 705186757536944969L;
        }.getType());
        return roleController.insertRoles(request);
    }

    /**
     * 新增成员
     * @return
     */
    private List<CreateOrgAccountResponse> createOrgAccount() {
        List<InsertRoleResponse> insertRoles = insertRoles();
        CreateOrgAccountRequest request = new CreateOrgAccountRequest();
//        request.setAccounts(Arrays.asList(new InsertAccountDTO(UUID.randomUUID().toString(),
//                "325056665@qq.com", null, null, Arrays.asList("B1", "B2"))));
        AccountRoleDTO ar = new AccountRoleDTO();
        BeanUtils.copyProperties(insertRoles.get(0), ar);
        request.setRoles(Arrays.asList(ar));
        return orgsController.createOrgAccount(request, NAMESPACE);
    }

    /**
     * 删除成员
     * @param username 成员名称
     */
    private void removeOrgAccount(final String username) {
        orgsController.removeOrgAccount(NAMESPACE, username);
    }

}
