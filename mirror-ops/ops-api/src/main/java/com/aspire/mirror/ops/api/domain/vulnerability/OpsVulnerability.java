package com.aspire.mirror.ops.api.domain.vulnerability;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import cn.afterturn.easypoi.excel.annotation.Excel;
import org.apache.commons.lang3.StringUtils;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Data;
import lombok.EqualsAndHashCode;

/** 
 *
 * 项目名称: ops-api 
 * <p/>
 * 
 * 类名: OpsVulnerability
 * <p/>
 *
 * 类功能描述: 漏洞信息实体
 * <p/>
 *
 * @author	pengguihua
 *
 * @date	2020年7月7日  
 *
 * @version	V1.0 
 * <br/>
 *
 * <b>Copyright(c)</b> 2020 卓望公司-版权所有 
 *
 */
@Data
@EqualsAndHashCode(of={"id"})
public class OpsVulnerability {
	// 端口 协议 服务  漏洞名称  漏洞分组  风险等级  漏洞编号   漏洞描述  解决方法  修复作业  软件版本依赖（修复漏洞所需的软件版，不同类型的OS） 是否重启 备注 更新时间
	
	public static final String	FLAG_Y			= "Y";
	public static final String	FLAG_N			= "N";
	@Excel(name = "漏洞名称", width = 30)
	protected String		name;

	protected String		id;							// 漏洞id, 优先级从高到低为  cve cncve cnvd cnnvd
	@Excel(name = "端口")
	protected String		port;
	@Excel(name = "协议")
	protected String		protocol;
	@Excel(name = "服务", width = 20)
	protected String		service;
//	@Excel(name = "操作系统")
//	protected String systemType;


	protected Long			groupId;
	@Excel(name = "漏洞分组", width = 20)
	protected String		groupName;
	@Excel(name = "风险等级")
	protected String		riskLevel;

	protected String riskLevelDesc;

	@Excel(name = "CVE编号", width = 20)
	protected String		cveNumber;
	@Excel(name = "CNCVE编号", width = 20)
	protected String		cncveNumber;
	@Excel(name = "CNVD编号", width = 20)
	protected String		cnvdNumber;
	@Excel(name = "CNNVD编号", width = 20)
	protected String		cnnvdNumber;
	@Excel(name = "漏洞描述", width = 30)
	protected String		describe;
	@Excel(name = "修复方案", width = 30)
	protected String		repairMethod;
	protected List<Long>	pipelineIdList;

	protected List<Long>	goBackPipelineIdList;

	protected List<Long>	recheckPipelineIdList;


	protected String		softDependencies;			// 软件版本依赖（修复漏洞所需的软件版，不同类型的OS）
	//	@JsonProperty("discover_producer")
	@Excel(name = "发现厂家", replace = {"绿盟_lvmeng", "启明星辰_qiming"})
	protected String discoverProducer;

	@Excel(name = "是否重启", replace = {"是_Y", "否_N"})
	protected String		needReboot;
	protected String 		canFixed;
//	protected String		needReboot		= FLAG_N;
//	protected String 		canFixed 		= FLAG_Y;
	@Excel(name="备注", width = 30)
	protected String		remark;

	@JsonProperty("updateTime")
	@JsonFormat(timezone = "GMT+8", pattern = "yyyy-MM-dd HH:mm:ss")
	protected Date		updateTime;

	protected Integer deviceNum;

	protected String 		isFixed;


	public static OpsVulnerability of(String id) {
		OpsVulnerability vulObj = new OpsVulnerability();
		vulObj.setId(id);
		return vulObj;
	}
	
	// 漏洞id, 优先级从高到低为  cve cncve cnvd cnnvd
	@JsonIgnore
	public String resolveVulId() {
		if (this.id != null) {
			return id;
		}
		this.id = StringUtils.isNotBlank(cveNumber) ? cveNumber : (StringUtils.isNotBlank(cncveNumber) 
						? cncveNumber : (StringUtils.isNotBlank(cnvdNumber) ? cnvdNumber : cnnvdNumber));
		return this.id;
	}
	
	@JsonIgnore
	public String getPipelineIdListText() {
		return pipelineIdList == null ? null : StringUtils.join(pipelineIdList, ",");
	}


	public List<Long> getPipelineIdList(){
		return pipelineIdList == null ? new ArrayList<>() : pipelineIdList;
	}
	
	public void setPipelineIdListText(String pipelineIdListText) {
		if (StringUtils.isBlank(pipelineIdListText)) {
			this.pipelineIdList = new ArrayList<>();
			return;
		}
		List<Long> pipeIdList 
			= Arrays.asList(pipelineIdListText.split(",")).stream().map(id -> Long.valueOf(id)).collect(Collectors.toList());
		this.pipelineIdList = pipeIdList;
	}

	@JsonIgnore
	public String getGoBackPipelineIdListText() {
		return goBackPipelineIdList == null ? null : StringUtils.join(goBackPipelineIdList, ",");
	}
	public List<Long> getGoBackPipelineIdList(){
		return goBackPipelineIdList == null ? new ArrayList<>() : goBackPipelineIdList;
	}

	public void setGoBackPipelineIdListText(String goBackPipelineIdList) {
		if (StringUtils.isBlank(goBackPipelineIdList)) {
			this.goBackPipelineIdList = new ArrayList<>();
			return;
		}
		List<Long> pipeIdList
				= Arrays.asList(goBackPipelineIdList.split(",")).stream().map(id -> Long.valueOf(id)).collect(Collectors.toList());
		this.goBackPipelineIdList = pipeIdList;
	}

	@JsonIgnore
	public String getRecheckPipelineIdListText() {
		return recheckPipelineIdList == null ? null : StringUtils.join(recheckPipelineIdList, ",");
	}
	public List<Long> getRecheckPipelineIdList(){
		return recheckPipelineIdList == null ? new ArrayList<>() : recheckPipelineIdList;
	}

	public void setRecheckPipelineIdListText(String recheckPipelineIdList) {
		if (StringUtils.isBlank(recheckPipelineIdList)) {
			this.recheckPipelineIdList = new ArrayList<>();
			return;
		}
		List<Long> pipeIdList
				= Arrays.asList(recheckPipelineIdList.split(",")).stream().map(id -> Long.valueOf(id)).collect(Collectors.toList());
		this.recheckPipelineIdList = pipeIdList;
	}
}
