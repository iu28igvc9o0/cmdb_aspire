<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- Always ensure to use the correct XML header as above! -->
<mapper namespace="com.aspire.mirror.ops.dao.OpsVulnerabilityDao">

	<!-- 漏洞 -->
	<resultMap type="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerability" id="opsVul">
		<result property="id" column="id" jdbcType="VARCHAR"/>
		<result property="port" column="port" jdbcType="VARCHAR"/>
		<result property="protocol" column="protocol" jdbcType="VARCHAR"/>
		<result property="service" column="service" jdbcType="VARCHAR"/>
		<result property="name" column="name" jdbcType="VARCHAR"/>
		<result property="groupId" column="group_id" jdbcType="BIGINT"/>
		<result property="groupName" column="group_name" jdbcType="VARCHAR"/>
		<result property="pipelineIdListText" column="pipeline_id_list" jdbcType="VARCHAR"/>
		<result property="goBackPipelineIdListText" column="go_back_pipeline_id_list" jdbcType="VARCHAR"/>
		<result property="recheckPipelineIdListText" column="recheck_pipeline_id_list" jdbcType="VARCHAR"/>
		<result property="riskLevel" column="risk_level" jdbcType="VARCHAR"/>
		<result property="cveNumber" column="cve_number" jdbcType="VARCHAR"/>
		<result property="cncveNumber" column="cncve_number" jdbcType="VARCHAR"/>
		<result property="cnvdNumber" column="cnvd_number" jdbcType="VARCHAR"/>
		<result property="cnnvdNumber" column="cnnvd_number" jdbcType="VARCHAR"/>
		<result property="describe" column="vul_describe" jdbcType="VARCHAR"/>
		<result property="repairMethod" column="repair_method" jdbcType="VARCHAR"/>
		<result property="softDependencies" column="soft_dependencies" jdbcType="VARCHAR"/>
		<result property="needReboot" column="need_reboot" jdbcType="VARCHAR"/>
		<result property="canFixed" column="can_fixed" jdbcType="VARCHAR"/>
		<result property="remark" column="remark" jdbcType="VARCHAR"/>
		<result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
<!--		<result property="systemType" column="system_type" jdbcType="VARCHAR"/>-->
		<result property="discoverProducer" column="discover_producer" jdbcType="VARCHAR"/>
		<result property="deviceNum" column="device_num" jdbcType="INTEGER"/>
		<result property="isFixed" column="is_fixed" jdbcType="VARCHAR"/>
<!--		<result property="systemVersion" column="system_version" jdbcType="VARCHAR"/>-->
<!--		<result property="plugVersion" column="plug_version" jdbcType="VARCHAR"/>-->
	</resultMap>

	<!-- 漏洞实例 -->
	<resultMap type="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstance" id="vulInstance">
		<result property="id" column="id" jdbcType="BIGINT"/>
		<result property="scanCycle" column="scan_cycle" jdbcType="VARCHAR"/>
		<result property="poolName" column="pool_name" jdbcType="VARCHAR"/>
		<result property="hostIp" column="host_ip" jdbcType="VARCHAR"/>
		<result property="isAgentRun" column="is_agent" jdbcType="VARCHAR"/>
		<result property="vulnerabilityId" column="vulnerability_id" jdbcType="VARCHAR"/>
		<result property="status" column="status" jdbcType="VARCHAR" />
		<result property="reportTime" column="report_time" jdbcType="VARCHAR"/>
		<result property="lastOperator" column="last_operator" jdbcType="VARCHAR"/>
		<result property="lastUpdateTime" column="last_update_time" jdbcType="TIMESTAMP"/>
		<result property="department1" column="department1" jdbcType="VARCHAR"/>
		<result property="department2" column="department2" jdbcType="VARCHAR"/>
		<result property="bizSystem" column="biz_system" jdbcType="VARCHAR"/>
<!--		<result property="department1Name" column="department1_name" jdbcType="VARCHAR"/>-->
<!--		<result property="department2Name" column="department2_name" jdbcType="VARCHAR"/>-->
<!--		<result property="bizSystemName" column="biz_system_name" jdbcType="VARCHAR"/>-->
		<result property="osType" column="os_type" jdbcType="VARCHAR"/>
		<result property="needReboot" column="need_reboot" jdbcType="VARCHAR"/>
		<result property="riskLevel" column="risk_level" jdbcType="VARCHAR"/>
		<result property="repairMethod" column="repair_method" jdbcType="VARCHAR"/>
		<result property="vulId" column="vul_id" jdbcType="VARCHAR"/>
		<result property="vulName" column="vul_name" jdbcType="VARCHAR"/>
		<result property="isFixed" column="is_fixed" jdbcType="VARCHAR"/>
		<result property="repairTime" column="repair_time" jdbcType="TIMESTAMP"/>
		<result property="repairPerson" column="repair_person" jdbcType="VARCHAR"/>
		<result property="repairPipelineInstanceId" column="repair_pipeline_instance_id" jdbcType="BIGINT"/>
		<result property="goBackTime" column="go_back_time" jdbcType="TIMESTAMP"/>
		<result property="goBackPerson" column="go_back_person" jdbcType="VARCHAR"/>
		<result property="goBackPipelineInstanceId" column="go_back_pipeline_instance_id" jdbcType="BIGINT"/>
		<result property="recheckTime" column="recheck_time" jdbcType="TIMESTAMP"/>
		<result property="recheckPerson" column="recheck_person" jdbcType="VARCHAR"/>
		<result property="recheckPipelineInstanceId" column="recheck_pipeline_instance_id" jdbcType="BIGINT"/>
		<result property="port" column="port" jdbcType="VARCHAR"/>
		<result property="protocol" column="protocol" jdbcType="VARCHAR"/>
		<result property="service" column="service" jdbcType="VARCHAR"/>
		<result property="cveNumber" column="cve_number" jdbcType="VARCHAR"/>
		<result property="vulDescribe" column="vul_describe" jdbcType="VARCHAR"/>
		<result property="discoverProducer" column="discover_producer" jdbcType="VARCHAR"/>
		<result property="groupName" column="group_name" jdbcType="VARCHAR"/>
		<result property="groupId" column="group_id" jdbcType="BIGINT"/>
	</resultMap>
	
	<resultMap type="com.aspire.mirror.ops.biz.model.OpsVulnerabilityScanCycle" id="vulScanCycle">
		<result property="scanCycle" column="scan_cycle" jdbcType="VARCHAR"/>
		<result property="status" column="status" jdbcType="VARCHAR"/>
		<result property="processTime" column="process_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<resultMap type="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityRepairExecuteLog" id="vulRepairExecuteLog">
		<result property="id" column="id" jdbcType="BIGINT"/>
		<result property="vulnerabilityInstanceId" column="vulnerability_instance_id" jdbcType="BIGINT"/>
		<result property="pipelineInstanceId" column="pipeline_instance_id" jdbcType="BIGINT"/>
		<result property="pipeInstStatus" column="status" jdbcType="INTEGER"/>
		<result property="operator" column="operator" jdbcType="VARCHAR"/>
		<result property="executeTime" column="execute_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<sql id="opsVul_allCols">
		v.id, v.port, v.protocol, v.service, v.name, 
		v.risk_level, v.cve_number, v.cncve_number, v.cnvd_number, 
		v.cnnvd_number, v.vul_describe, v.repair_method, v.pipeline_id_list, v.go_back_pipeline_id_list,v.recheck_pipeline_id_list,
		v.soft_dependencies, v.need_reboot, 
		v.can_fixed, v.remark, v.update_time, v.discover_producer, v.is_fixed
	</sql>
	
	<select id="getVulScanCycleByKey" parameterType="java.util.Map" resultMap="vulScanCycle">
		select scan_cycle, status, process_time from ops_vulnerability_scan_cycle where scan_cycle = #{scanCycle}
	</select>
	
	<insert id="insertOpsVulScanCycle" parameterType="com.aspire.mirror.ops.biz.model.OpsVulnerabilityScanCycle">
		insert into ops_vulnerability_scan_cycle (
			scan_cycle,
			status,
			process_time,
			create_time
		) values (
			#{scanCycle},
			#{status},
			#{processTime},
			#{createTime}
		)
	</insert>
	
	<update id="updateOpsVulScanCycle" parameterType="com.aspire.mirror.ops.biz.model.OpsVulnerabilityScanCycle">
		update ops_vulnerability_scan_cycle
		set
		scan_cycle = #{scanCycle}
		<if test="status != null">
			, status = #{status}
		</if>
		<if test="processTime != null">
		, process_time = #{processTime}
		</if>
		 where scan_cycle = #{scanCycle}
	</update>
	
	<select id="getVulnerabilityById" resultMap="opsVul" parameterType="java.util.Map">
		select <include refid="opsVul_allCols" />, vr.vulnerability_group_id group_id, vg.name group_name
		  from ops_vulnerability v
		       LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		       LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		 where v.id = #{vulId}      
	</select>
	<select id="getVulnerabilityByName" resultMap="opsVul" parameterType="java.lang.String">
		select <include refid="opsVul_allCols" />, vr.vulnerability_group_id group_id, vg.name group_name
		from ops_vulnerability v
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where v.name = #{name}
	</select>

	<insert id="insertOpsVulnerability" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerability">
		insert into ops_vulnerability(
			id,
			port,
			protocol,
			service,
			name,
			risk_level,
			cve_number,
			cncve_number,
			cnvd_number,
			cnnvd_number,
			vul_describe,
			repair_method,
			pipeline_id_list,
			go_back_pipeline_id_list,
			soft_dependencies,
			need_reboot,
			can_fixed,
			remark,
			update_time,
<!--			system_type,-->
			discover_producer,
			is_fixed
<!--		,-->
<!--			system_version,-->
<!--			plug_version-->
		) values (
			#{id},
			#{port},
			#{protocol},
			#{service},
			#{name},
			#{riskLevel},
			#{cveNumber},
			#{cncveNumber},
			#{cnvdNumber},
			#{cnnvdNumber},
			#{describe},
			#{repairMethod},
			#{pipelineIdListText},
			#{goBackPipelineIdListText},
			#{softDependencies},
			#{needReboot},
			#{canFixed},
			#{remark},
			#{updateTime},
<!--			#{systemType},-->
			#{discoverProducer},
			'N'
<!--		,-->
<!--			#{systemVersion},-->
<!--			#{plugVersion}-->
		) 
	</insert>
	<insert id="batchInsertVulnerability" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerability">
		insert into ops_vulnerability (
		id,
		port,
		protocol,
		service,
		name,
		risk_level,
		cve_number,
		cncve_number,
		cnvd_number,
		cnnvd_number,
		vul_describe,
		repair_method,
		pipeline_id_list,
		go_back_pipeline_id_list,
		soft_dependencies,
		need_reboot,
		can_fixed,
		remark,
		update_time,
		discover_producer,
		is_fixed,
		biz_employee
		) values
		<foreach collection="list" item="item" index="index" separator=",">
		(
		#{item.id,jdbcType=VARCHAR},
		#{item.port,jdbcType=VARCHAR},
		#{item.protocol,jdbcType=VARCHAR},
		#{item.service,jdbcType=VARCHAR},
		#{item.name,jdbcType=VARCHAR},
		#{item.riskLevel,jdbcType=VARCHAR},
		#{item.cveNumber,jdbcType=VARCHAR},
		#{item.cncveNumber,jdbcType=VARCHAR},
		#{item.cnvdNumber,jdbcType=VARCHAR},
		#{item.cnnvdNumber,jdbcType=VARCHAR},
		#{item.describe,jdbcType=VARCHAR},
		#{item.repairMethod,jdbcType=VARCHAR},
		#{item.pipelineIdListText,jdbcType=VARCHAR},
		#{item.goBackPipelineIdListText,jdbcType=VARCHAR},
		#{item.softDependencies,jdbcType=VARCHAR},
		#{item.needReboot,jdbcType=VARCHAR},
		#{item.canFixed,jdbcType=VARCHAR},
		#{item.remark,jdbcType=VARCHAR},
		#{item.updateTime,jdbcType=TIMESTAMP},
		#{item.discoverProducer,jdbcType=VARCHAR},
		'N',
		{item.bizEmployee,jdbcType=VARCHAR}
		)
		</foreach>
	</insert>
	<update id="updateOpsVulnerability" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerability">
		update ops_vulnerability
		set id = #{id} , update_time  = NOW()
			<include refid="opsVul_update_set"/>
		where id = #{id}
	</update>

	<select id="getRiskLevelList" resultType="string">
		SELECT DISTINCT risk_level
		FROM ops_vulnerability
	</select>

	<!-- 漏洞修改字段 -->
	<sql id="opsVul_update_set">
		<if test="port != null and port != ''">
			, port  = #{port}
		</if>
		<if test="protocol != null and protocol != ''">
			, protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			, service  = #{service}
		</if>
		<if test="name != null and name != ''">
			, name  = #{name}
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			, risk_level  = #{riskLevel}
		</if>
		<if test="cveNumber != null and cveNumber != ''">
			, cve_number  = #{cveNumber}
		</if>
		<if test="cncveNumber != null and cncveNumber != ''">
			, cncve_number  = #{cncveNumber}
		</if>
		<if test="cnvdNumber != null and cnvdNumber != ''">
			, cnvd_number  = #{cnvdNumber}
		</if>
		<if test="cnnvdNumber != null and cnnvdNumber != ''">
			, cnnvd_number  = #{cnnvdNumber}
		</if>
		<if test="describe != null and describe != ''">
			, vul_describe  = #{describe}
		</if>
		<if test="repairMethod != null and repairMethod != ''">
			, repair_method  = #{repairMethod}
		</if>
		<if test="pipelineIdListText != null">
			, pipeline_id_list  = #{pipelineIdListText}
		</if>
		<if test="goBackPipelineIdListText != null">
			, go_back_pipeline_id_list  = #{goBackPipelineIdListText}
		</if>
		<if test="recheckPipelineIdListText != null">
			, recheck_pipeline_id_list  = #{recheckPipelineIdListText}
		</if>
		<if test="softDependencies != null and softDependencies != ''">
			, soft_dependencies  = #{softDependencies}
		</if>
		<if test="needReboot != null and needReboot != ''">
			, need_reboot  = #{needReboot}
		</if>
		<if test="canFixed != null and canFixed != ''">
			, can_fixed  = #{canFixed}
		</if>
		<if test="isFixed != null and isFixed != ''">
			, is_fixed  = #{isFixed}
		</if>
		<if test="remark != null and remark != ''">
			, remark  = #{remark}
		</if>
		<if test="updateTime != null">
			, update_time  = #{updateTime}
		</if>
<!--		<if test="systemType != null and systemType != ''">-->
<!--			, system_type  = #{systemType}-->
<!--		</if>-->
		<if test="discoverProducer != null and discoverProducer != ''">
			, discover_producer  = #{discoverProducer}
		</if>
<!--		<if test="systemVersion != null and systemVersion != ''">-->
<!--			, system_version  = #{systemVersion}-->
<!--		</if>-->
<!--		<if test="plugVersion != null and plugVersion != ''">-->
<!--			, plug_version  = #{plugVersion}-->
<!--		</if>-->
	</sql>

	<select id="getVulnerabilityList" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityQueryModel" resultMap="opsVul">
		select <include refid="opsVul_allCols" />, vr.vulnerability_group_id group_id, vg.name group_name,
		(select count(distinct CONCAT_WS('',host_ip, pool_name)) from ops_vulnerability_instance where vulnerability_id = v.id
		<if test="scanCycle != null and scanCycle != ''">
			and scan_cycle = #{scanCycle}
		</if>
		) device_num
		 from ops_vulnerability v
		  	LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		  	LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
<!--			left join ops_vulnerability_instance vi on vi.vulnerability_id = v.id-->
		where 1=1 <include refid="opsVul_query_where"/>
<!--		order by update_time desc-->
		<if test="pageSize != null and pageSize > 0">
			order by `${orderColumn}` ${orderType}
			limit #{startIdx},#{pageSize}
		</if>
	</select>

	<select id="getVulnerabilityListTotalSize" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityQueryModel" resultType="Integer">
		select count(v.id)
		from ops_vulnerability v
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1 <include refid="opsVul_query_where"/>
	</select>

	<sql id="opsVul_query_where">
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="port != null and port != ''">
			and v.port like concat('%',#{port},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="cveNumber != null and cveNumber != ''">
			and v.cve_number = #{cveNumber}
		</if>
		<if test="cncveNumber != null and cncveNumber != ''">
			and v.cncve_number = #{cncveNumber}
		</if>
		<if test="cnvdNumber != null and cnvdNumber != ''">
			and v.cnvd_number = #{cnvdNumber}
		</if>
		<if test="cnnvdNumber != null and cnnvdNumber != ''">
			and v.cnnvd_number = #{cnnvdNumber}
		</if>
		<if test="describe != null and describe != ''">
			and v.vul_describe = #{describe}
		</if>
		<if test="repairMethod != null and repairMethod != ''">
			and v.repair_method = #{repairMethod}
		</if>
		<if test="pipelineIdListText != null and pipelineIdListText != ''">
			and v.pipeline_id_list like concat('%',#{pipelineIdListText},'%')
		</if>
		<if test="goBackPipelineIdListText != null and goBackPipelineIdListText != ''">
			and v.go_back_pipeline_id_list like concat('%',#{goBackPipelineIdListText},'%')
		</if>
		<if test="softDependencies != null and softDependencies != ''">
			and v.soft_dependencies = #{softDependencies}
		</if>
		<if test="needReboot != null and needReboot != ''">
			and v.need_reboot = #{needReboot}
		</if>
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="isFixed != null and isFixed != ''">
			and v.is_fixed = #{isFixed}
		</if>
		<if test="remark != null and remark != ''">
			and v.remark = #{remark}
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
<!--		<if test="department1 != null and department1 != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department1 = #{department1})-->
<!--		</if>-->
<!--		<if test="department2 != null and department2 != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department2 = #{department2})-->
<!--		</if>-->
<!--		<if test="bizSystem != null and bizSystem != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where biz_system = #{bizSystem})-->
<!--		</if>-->
<!--		<if test="department1 != null and department1 != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department1 = #{department1})-->
<!--		</if>-->
<!--		<if test="department2 != null and department2 != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department2 = #{department2})-->
<!--		</if>-->
<!--		<if test="bizSystem != null and bizSystem != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where biz_system = #{bizSystem})-->
<!--		</if>-->
<!--		<if test="department1Name != null and department1Name != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department1_name = #{department1Name})-->
<!--		</if>-->
<!--		<if test="department2Name != null and department2Name != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where department2_name = #{department2Name})-->
<!--		</if>-->
<!--		<if test="bizSystemName != null and bizSystemName != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where biz_system_name = #{bizSystemName})-->
<!--		</if>-->
<!--		<if test="(osType != null and osType != '') or (hostIp != null and hostIp != '') or (poolName != null and poolName != '') or (scanCycle != null and scanCycle != '')">-->
			and v.id in (
			select distinct vulnerability_id from ops_vulnerability_instance where 1=1
			<if test="department1 != null and department1 != ''">
				and department1 in (
				<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="department2 != null and department2 != ''">
				and department2  in (
				<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="bizSystem != null and bizSystem != ''">
				and  biz_system in (
				<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="osType != null and osType != ''">
				and os_type in (
				<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="hostIp != null and hostIp != ''">
				and  host_ip = #{hostIp}
			</if>
<!--			<if test="poolName != null and poolName != ''">-->
<!--				and pool_name = #{poolName}-->
<!--			</if>-->
			<if test="poolName != null and poolName != ''">
				and pool_name in (
				<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
					#{item}
				</foreach>
				)
			</if>
			<if test="scanCycle != null and scanCycle != ''">
				and scan_cycle = #{scanCycle}
			</if>
			)
<!--		</if>-->
<!--		<if test="hostIp != null and hostIp != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where host_ip = #{hostIp})-->
<!--		</if>-->
<!--		<if test="poolName != null and poolName != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where pool_name = #{poolName})-->
<!--		</if>-->
<!--		<if test="scanCycle != null and scanCycle != ''">-->
<!--			and v.id in (select distinct vulnerability_id from ops_vulnerability_instance where scan_cycle = #{scanCycle})-->
<!--		</if>-->
	</sql>
	
	<select id="loadPoolCodeNameMapList" resultType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulPoolCodeNameMap" >
		select pool_code poolCode, pool_name poolName from ops_vul_pool_code_name
	</select>
			
	<sql id="vul_instance_allCols">
		vi.id, vi.scan_cycle, vi.pool_name, vi.host_ip, vi.vulnerability_id, vi.status,
		vi.report_time, vi.last_operator, vi.last_update_time, vi.department1, vi.department2, vi.biz_system, vi.os_type, vi.is_fixed, vi.repair_time,
		repair_person, repair_pipeline_instance_id, go_back_time, go_back_person, go_back_pipeline_instance_id, recheck_time, recheck_person, recheck_pipeline_instance_id
	</sql>		
	
	<select id="getVulnerabilityInstanceById" parameterType="java.util.Map" resultMap="vulInstance">
		select <include refid="vul_instance_allCols"/>
		  from ops_vulnerability_instance vi 
		 where vi.id = #{id}
	</select>
			
	<select id="getVulnerabilityInstanceByKeys" parameterType="java.util.Map" resultMap="vulInstance">
		select <include refid="vul_instance_allCols"/>
		  from ops_vulnerability_instance vi 
		 where vi.scan_cycle = #{scanCycle}
		   and vi.pool_name = #{poolName}
		   and vi.host_ip = #{hostIp}
		   and vi.vulnerability_id = #{vulnerabilityId}
	</select>
	
	<insert id="insertOpsVulnerabilityInstance" useGeneratedKeys="true" keyColumn="id"  keyProperty="id"
			parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstance">
		insert into ops_vulnerability_instance(
			scan_cycle,
			pool_name,
			host_ip,
			vulnerability_id,
			status,
			report_time,
			last_operator,
			last_update_time,
			department1,
			department2,
			biz_system,
			os_type,
			is_fixed
		) values (
			#{scanCycle},
			#{poolName},
			#{hostIp},
			#{vulnerabilityId},
			#{status},
			#{reportTime},
			#{lastOperator},
			#{lastUpdateTime},
			#{department1},
		    #{department2},
			#{bizSystem},
			#{osType},
			'N'
		)
	</insert>
	
	<update id="updateOpsVulnerabilityInstance" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstance">
		update ops_vulnerability_instance
		set id = #{id} ,  last_update_time = NOW()
			<include refid="opsVulInstance_update_set"/>
		where id = #{id}
	</update>

	<!-- 漏洞实例修改字段 -->
	<sql id="opsVulInstance_update_set">
		<if test="scanCycle != null and scanCycle != ''">
			, scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			, pool_name = #{poolName}
		</if>
		<if test="hostIp != null and hostIp != ''">
			, host_ip = #{hostIp}
		</if>
		<if test="status != null and status != ''">
			, status = #{status}
		</if>
		<if test="reportTime != null and reportTime != ''">
			, report_time = #{reportTime}
		</if>
		<if test="lastOperator != null and lastOperator != ''">
			, last_operator = #{lastOperator}
		</if>
		<if test="department1 != null and department1 != ''">
			, department1 = #{department1}
		</if>
		<if test="department2 != null and department2 != ''">
			, department2 = #{department2}
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			, biz_system = #{bizSystem}
		</if>
		<if test="osType != null and osType != ''">
			, os_type = #{osType}
		</if>
		<if test="isFixed != null and isFixed != ''">
			, is_fixed = #{isFixed}
		</if>
		<if test="repairTime != null">
			, repair_time = #{repairTime}
		</if>
		<if test="repairPerson != null and repairPerson != ''">
			, repair_person = #{repairPerson}
		</if>
		<if test="repairPipelineInstanceId != null ">
			, repair_pipeline_instance_id = #{repairPipelineInstanceId}
		</if>
		<if test="goBackTime != null">
			, go_back_time = #{goBackTime}
		</if>
		<if test="goBackPerson != null and goBackPerson != ''">
			, go_back_person = #{goBackPerson}
		</if>
		<if test="goBackPipelineInstanceId != null ">
			, go_back_pipeline_instance_id = #{goBackPipelineInstanceId}
		</if>
		<if test="recheckTime != null">
			, recheck_time = #{recheckTime}
		</if>
		<if test="recheckPerson != null and recheckPerson != ''">
			, recheck_person = #{recheckPerson}
		</if>
		<if test="recheckPipelineInstanceId != null ">
			, recheck_pipeline_instance_id = #{recheckPipelineInstanceId}
		</if>
		<if test="bizEmployee != null">
			, biz_employee = #{bizEmployee}
		</if>
	</sql>

	<select id="getVulnerabilityInstanceList" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstanceQueryModel" resultMap="vulInstance">
		select <include refid="vul_instance_allCols"/>,IF(ISNULL(p.id), 'N', 'Y') is_agent,v.id vul_id, v.name vul_name, v.need_reboot, v.risk_level, v.repair_method, v.can_fixed,
		v.discover_producer,vg.vulnerability_group_id group_id, vg.name group_name,
		v.port port, v.protocol protocol, v.service service, v.cve_number cveNumber, v.vul_describe vulDescribe
		from ops_vulnerability_instance vi
		left join ops_vulnerability v on vi.vulnerability_id = v.id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		left join ops_spectre_host h on h.agent_ip = vi.host_ip
		left join ops_spectre_proxy p on p.pool = vi.pool_name and h.proxy_id = p.id
		where 1=1 <include refid="opsVulInstance_query_where"/>
		order by vi.id
		<if test="pageSize != null and pageSize > 0">
			limit #{startIdx},#{pageSize}
		</if>
	</select>
	<select id="getWaitRepairVulnerabilityInstanceIdList" parameterType="string" resultType="com.aspire.mirror.ops.api.domain.vulnerability.VulInstanceAgentInfo">
		select vi.id vulInstanceId,
		CONCAT(p.id, ':', vi.host_ip) agentIp
		from ops_vulnerability_instance vi
		left join ops_spectre_host h on h.agent_ip = vi.host_ip
		left join ops_spectre_proxy p on p.pool = vi.pool_name and h.proxy_id = p.id
		where vi.vulnerability_id = #{vulId}
<!--		and vi.status = 'WAIT_REPAIR'-->
		and vi.history_flag = 'N'
		and p.id is not null
	</select>
	<select id="getVulnerabilityInstanceListCount" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityInstanceQueryModel" resultType="Integer">
		select count(vi.id)
		from ops_vulnerability_instance vi
		left join ops_vulnerability v on vi.vulnerability_id = v.id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		where 1=1 <include refid="opsVulInstance_query_where"/>
	</select>
	
	<update id="markPreviousVulInstanceDataList2History" parameterType="java.util.Map">
		update ops_vulnerability_instance set history_flag = 'Y' 
		 where history_flag != 'Y' 
		   and scan_cycle != #{currScanCycle}
	</update>
	<select id="getNewVulScanCycle" resultType="java.lang.String">
		select max(scan_cycle) from ops_vulnerability_scan_cycle
	</select>
	<sql id="opsVulInstance_query_where">
		<if test="historyFlag != null and historyFlag != ''">
			and vi.history_flag = #{historyFlag}
		</if>
<!--		and history_flag = 'N'-->
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name like concat('%',#{poolName},'%')
		</if>
		<if test="hostIp != null and hostIp != ''">
			and vi.host_ip like concat('%',#{hostIp},'%')
		</if>
		<if test="vulnerabilityId != null and vulnerabilityId != ''">
			and vi.vulnerability_id = #{vulnerabilityId}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="reportTime != null and reportTime != ''">
			and vi.report_time = #{reportTime}
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="isFixed != null and isFixed != ''">
			and vi.is_fixed = #{isFixed}
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol like concat('%',#{protocol},'%')
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="resFilterMap != null">
			<if test="resFilterMap.idcType_name != null and resFilterMap.idcType_name.size > 0">
				and vi.pool_name in (
				<foreach collection="resFilterMap.idcType_name" item="item" index="index" separator=",">
					#{item, jdbcType=VARCHAR}
				</foreach>
				)
			</if>
		</if>
	</sql>

	<insert id="insertOpsVulRepairExecuteLog" useGeneratedKeys="true" keyColumn="id" keyProperty="id"
			parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityRepairExecuteLog">
		insert into ops_vulnerability_repair_log (
			vulnerability_instance_id,
			pipeline_instance_id,
			operator,
			operate_type,
			execute_time
		) values (
			#{vulnerabilityInstanceId},
			#{pipelineInstanceId},
			#{operator},
			#{operateType},
			#{executeTime}
		)
	</insert>

	<sql id="vulRepairExecuteLog_allCols">
		e.id, e.vulnerability_instance_id, e.pipeline_instance_id, e.operator, e.operate_type, e.execute_time, e.execute_uuid
	</sql>

	<select id="getVulRepairExecutelogByExecuteUuid" parameterType="java.util.Map" resultMap="vulRepairExecuteLog">
		select <include refid="vulRepairExecuteLog_allCols" />, p.status
		  from ops_vulnerability_repair_log e
		  left join ops_pipeline_instance p on e.pipeline_instance_id = p.pipeline_instance_id
		 where e.execute_uuid = #{executeUuid}
	</select>
	<select id="getVulnerabilityReport" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityReportQuery" resultType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityReportItem">
		select vg.vulnerability_group_id groupId, IF(ISNULL(vg.name), '未关联分组', vg.name) groupName,  vi.department1 department1, vi.department2 department2, vi.biz_system bizSystem,
		sum(case when vi.`status`='WAIT_REPAIR' then 1 else 0 end ) 'waitRepairNum',
		sum(case when vi.`status`='PROCESSED' then 1 else 0 end ) 'processedNum',
		sum(case when vi.`status`='BEYOND_REPAIR' then 1 else 0 end ) 'beyondRepairNum',
		count(vi.id) totalNum,
		sum(case when v.`risk_level`='1' then 1 else 0 end ) 'highNum',
		sum(case when v.`risk_level`='2' then 1 else 0 end ) 'midNum',
		sum(case when v.`risk_level`='3' then 1 else 0 end ) 'lowNum',
		sum(case when v.`risk_level`='4' then 1 else 0 end ) 'infoNum'
		from ops_vulnerability_instance  vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
<!--		<if test="riskLevel != null and riskLevel != ''">-->
<!--			and v.risk_level = #{riskLevel}-->
<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		group by vr.vulnerability_group_id, vi.department1, vi.department2, vi.biz_system
	</select>
	<select id="getVulNewReportTotalSize" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulNewReportQuery" resultType="java.lang.Integer">
		select count(*) from (
		select count(*) from ops_vulnerability_instance  vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name in (
			<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
		<!--		<if test="riskLevel != null and riskLevel != ''">-->
		<!--			and v.risk_level = #{riskLevel}-->
		<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="ip != null and ip!= ''">
			and vi.host_ip = #{ip}
		</if>
		<if test="groupId != null and groupId!= ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
		<if test="statisticalDimension != null and statisticalDimension != ''">
			group by
			<foreach collection="statisticalDimension.split(',')" item="item" index="index" separator=",">
				<if test="item.equals('poolName')">
					vi.pool_name
				</if>
				<if test="item.equals('department1')">
					vi.department1
				</if>
				<if test="item.equals('department2')">
					vi.department2
				</if>
				<if test="item.equals('bizSystem')">
					vi.biz_system
				</if>
			</foreach>
		</if>
<!--		group by vi.pool_name, vi.department1, vi.department2, vi.biz_system-->
		) a
	</select>
	<select id="getVulNewReport" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulNewReportQuery" resultType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulnerabilityNewReportItem">
		select

		<if test="statisticalDimension != null and statisticalDimension != ''">
			<foreach collection="statisticalDimension.split(',')" item="item" index="index" separator="">
				<if test="item.equals('poolName')">
					vi.pool_name poolName,
				</if>
				<if test="item.equals('department1')">
					vi.department1 department1,
				</if>
				<if test="item.equals('department2')">
					vi.department2 department2,
				</if>
				<if test="item.equals('bizSystem')">
					vi.biz_system bizSystem,
				</if>
			</foreach>
		</if>
<!--		vi.pool_name poolName,  vi.department1 department1, vi.department2 department2,-->
<!--		vi.biz_system bizSystem,-->
		GROUP_CONCAT(vi.biz_employee SEPARATOR ',')  bizEmployee,
		sum(case when vi.`status`='WAIT_REPAIR' then 1 else 0 end ) 'waitRepairNum',
		sum(case when vi.`status`='PROCESSED' then 1 else 0 end ) 'processedNum',
		sum(case when vi.`status`='BEYOND_REPAIR' then 1 else 0 end ) 'beyondRepairNum',
		sum(case when vi.`status`='NO_NEED' then 1 else 0 end ) 'noNeedNum',
		count(vi.id) totalNum,
		sum(case when v.`risk_level`='1' then 1 else 0 end ) 'highNum',
		sum(case when v.`risk_level`='2' then 1 else 0 end ) 'midNum',
		sum(case when v.`risk_level`='3' then 1 else 0 end ) 'lowNum',
		sum(case when v.`risk_level`='4' then 1 else 0 end ) 'infoNum'
		from ops_vulnerability_instance  vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name in (
			<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
<!--		<if test="riskLevel != null and riskLevel != ''">-->
<!--			and v.risk_level = #{riskLevel}-->
<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="ip != null and ip!= ''">
			and vi.host_ip = #{ip}
		</if>
		<if test="groupId != null and groupId!= ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
		<if test="statisticalDimension != null and statisticalDimension != ''">
			group by
			<foreach collection="statisticalDimension.split(',')" item="item" index="index" separator=",">
				<if test="item.equals('poolName')">
					vi.pool_name
				</if>
				<if test="item.equals('department1')">
					vi.department1
				</if>
				<if test="item.equals('department2')">
					vi.department2
				</if>
				<if test="item.equals('bizSystem')">
					vi.biz_system
				</if>
			</foreach>
		</if>
		<if test="pageSize != null and pageSize > 0">
			order by vi.biz_system desc
			limit #{startIdx},#{pageSize}
		</if>
	</select>
	<select id="queryVulReportDetailStatistics" resultType="com.aspire.mirror.ops.api.domain.vulnerability.VulReportDetailStatistics" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulNewReportQuery">
		select
		v.risk_level riskLevel,
		sum(case when vi.`status`='WAIT_REPAIR' then 1 else 0 end ) 'waitRepairNum',
		sum(case when vi.`status`='PROCESSED' then 1 else 0 end ) 'processedNum',
		sum(case when vi.`status`='BEYOND_REPAIR' then 1 else 0 end ) 'beyondRepairNum',
		sum(case when vi.`status`='NO_NEED' then 1 else 0 end ) 'noNeedNum'
		from ops_vulnerability_instance  vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name in (
			<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
		<!--		<if test="riskLevel != null and riskLevel != ''">-->
		<!--			and v.risk_level = #{riskLevel}-->
		<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="ip != null and ip!= ''">
			and vi.host_ip = #{ip}
		</if>
		<if test="groupId != null and groupId!= ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
		group by vi.pool_name, vi.biz_system, v.risk_level
	</select>
	<select id="getVulNumStatisticsByVulInstanceId" resultType="map">
		SELECT
		SUM(CASE WHEN v.`risk_level`='1' THEN 1 ELSE 0 END) 'highNum',
		SUM(CASE WHEN v.`risk_level`='2' THEN 1 ELSE 0 END) 'midNum',
		SUM(CASE WHEN v.`risk_level`='3' THEN 1 ELSE 0 END) 'lowNum',
		SUM(CASE WHEN v.`risk_level`='4' THEN 1 ELSE 0 END) 'infoNum'
		FROM ops_vulnerability v
		WHERE v.id IN (
		SELECT DISTINCT vi.vulnerability_id
		FROM ops_vulnerability_instance vi
		WHERE vi.host_ip = #{hostIp} AND vi.pool_name= #{poolName}
		)
	</select>
	<select id="getFlushSerialNum" resultType="string">
		select flush_serial_num from ops_vul_load_flush_serial
	</select>
	<update id="updateFlushSerialNum" parameterType="string">
		update ops_vul_load_flush_serial set flush_serial_num = #{flushSerialNum}
	</update>
	<select id="getScanCycleList" resultType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulScanCycle">
		select  scan_cycle scanCycle, status status, process_time processTime from ops_vulnerability_scan_cycle order by create_time desc
	</select>
	<update id="flushOpsVulnerabilityIsFixed">
		UPDATE ops_vulnerability v SET v.is_fixed = 'Y'
		WHERE v.id = #{vulId} AND (
		SELECT COUNT(id)
		FROM ops_vulnerability_instance
		WHERE vulnerability_id = #{vulId} AND scan_cycle = #{scanCycle} AND is_fixed = 'N') = 0
	</update>
	<select id="queryVulReportItemListTotalSize" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulNewReportQuery" resultType="java.lang.Integer">
		select count(*) from (
		select
		vi.host_ip ip,
		vi.pool_name poolName,
		sum(case when v.`risk_level`='1' then 1 else 0 end ) 'highNum',
		sum(case when v.`risk_level`='2' then 1 else 0 end ) 'midNum',
		sum(case when v.`risk_level`='3' then 1 else 0 end ) 'lowNum',
		sum(case when v.`risk_level`='4' then 1 else 0 end ) 'infoNum'
		from ops_vulnerability_instance vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name in (
			<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
		<!--		<if test="riskLevel != null and riskLevel != ''">-->
		<!--			and v.risk_level = #{riskLevel}-->
		<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="ip != null and ip!= ''">
			and vi.host_ip = #{ip}
		</if>
		<if test="groupId != null and groupId!= ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
		group by vi.pool_name, vi.host_ip
		<if test="pageSize != null and pageSize > 0">
			order by vi.host_ip desc
			limit #{startIdx},#{pageSize}
		</if>
		) a
	</select>
	<select id="queryVulReportItemList" parameterType="com.aspire.mirror.ops.api.domain.vulnerability.OpsVulNewReportQuery" resultType="com.aspire.mirror.ops.api.domain.vulnerability.VulReportDetailItem">
		select a.*, vp.pool_code poolCode from (
		select
		vi.host_ip ip,
		vi.pool_name poolName,
		sum(case when v.`risk_level`='1' then 1 else 0 end ) 'highNum',
		sum(case when v.`risk_level`='2' then 1 else 0 end ) 'midNum',
		sum(case when v.`risk_level`='3' then 1 else 0 end ) 'lowNum',
		sum(case when v.`risk_level`='4' then 1 else 0 end ) 'infoNum'
		from ops_vulnerability_instance vi
		left join ops_vulnerability v on v.id = vi.vulnerability_id
		LEFT JOIN ops_vulnerability_group_relation vr on v.id = vr.vulnerability_id
		LEFT JOIN ops_vulnerability_group vg on vg.vulnerability_group_id = vr.vulnerability_group_id
		where 1=1
		<if test="scanCycle != null and scanCycle != ''">
			and vi.scan_cycle = #{scanCycle}
		</if>
		<if test="poolName != null and poolName != ''">
			and vi.pool_name in (
			<foreach collection="poolName.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department1 != null and department1 != ''">
			and vi.department1 in (
			<foreach collection="department1.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="department2 != null and department2 != ''">
			and vi.department2 in (
			<foreach collection="department2.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="bizSystem != null and bizSystem != ''">
			and vi.biz_system in (
			<foreach collection="bizSystem.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="osType != null and osType != ''">
			and vi.os_type in (
			<foreach collection="osType.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="riskLevel != null and riskLevel != ''">
			and v.risk_level in (
			<foreach collection="riskLevel.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="groupId != null and groupId != ''">
			and vr.vulnerability_group_id in (
			<foreach collection="groupId.split(',')" item="item"  index="index" separator=",">
				#{item}
			</foreach>
			)
		</if>
		<if test="id != null and id != ''">
			and v.id like concat('%',#{id},'%')
		</if>
		<if test="protocol != null and protocol != ''">
			and v.protocol  = #{protocol}
		</if>
		<if test="service != null and service != ''">
			and v.service like concat('%',#{service},'%')
		</if>
		<if test="name != null and name != ''">
			and v.name like concat('%',#{name},'%')
		</if>
		<!--		<if test="riskLevel != null and riskLevel != ''">-->
		<!--			and v.risk_level = #{riskLevel}-->
		<!--		</if>-->
		<if test="canFixed != null and canFixed != ''">
			and v.can_fixed = #{canFixed}
		</if>
		<if test="status != null and status != ''">
			and vi.status = #{status}
		</if>
		<if test="ip != null and ip!= ''">
			and vi.host_ip = #{ip}
		</if>
		<if test="groupId != null and groupId!= ''">
			and vr.vulnerability_group_id = #{groupId}
		</if>
		group by vi.pool_name, vi.host_ip
		<if test="pageSize != null and pageSize > 0">
			order by vi.host_ip desc
			limit #{startIdx},#{pageSize}
		</if>
		) a
		left join ops_vul_pool_code_name vp on vp.pool_name = a.poolName
	</select>
</mapper>
