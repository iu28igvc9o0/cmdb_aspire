/**
 *
 * 项目名： ops-service 
 * <p/> 
 *
 * 文件名:  OpsManageDataDao.java 
 * <p/>
 *
 * 功能描述: TODO 
 * <p/>
 *
 * @author	pengguihua
 *
 * @date	2019年10月29日 
 *
 * @version	V1.0
 * <p/>
 *
 *<b>Copyright(c)</b> 2019 卓望公司-版权所有<br/>
 *   
 */
package com.aspire.mirror.ops.dao;

import java.util.List;
import java.util.Map;

import com.aspire.mirror.ops.api.domain.vulnerability.*;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import com.aspire.mirror.ops.biz.model.OpsVulnerabilityScanCycle;

/** 
 *
 * 项目名称: ops-service 
 * <p/>
 * 
 * 类名: OpsDataDao
 * <p/>
 *
 * 类功能描述: TODO
 * <p/>
 *
 * @author	pengguihua
 *
 * @date	2019年10月29日  
 *
 * @version	V1.0 
 * <br/>
 *
 * <b>Copyright(c)</b> 2019 卓望公司-版权所有 
 *
 */
@Mapper
public interface OpsVulnerabilityDao {

	/*
	*  漏洞
	* */

	OpsVulnerabilityScanCycle getVulScanCycleByKey(@Param("scanCycle") String scanCycle);
	
	void insertOpsVulScanCycle(OpsVulnerabilityScanCycle scanCycle);
	
	void updateOpsVulScanCycle(OpsVulnerabilityScanCycle scanCycle);
	
	OpsVulnerability getVulnerabilityById(@Param("vulId") String vulId);
	
	void insertOpsVulnerability(OpsVulnerability vul);

	List<OpsVulnerability> getVulnerabilityList(OpsVulnerabilityQueryModel model);

	Integer getVulnerabilityListTotalSize(OpsVulnerabilityQueryModel model);

	void updateOpsVulnerability(OpsVulnerability vul);
	
	List<OpsVulPoolCodeNameMap> loadPoolCodeNameMapList();

	List<Object> getRiskLevelList();

	/*
	 *  漏洞实例
	 * */

	OpsVulnerabilityInstance getVulnerabilityInstanceById(@Param("id") Long id);

	OpsVulnerabilityInstance getVulnerabilityInstanceByKeys(@Param("scanCycle") String scanCycle, @Param("poolName") String poolName, 
			@Param("hostIp") String hostIp, @Param("vulnerabilityId") String vulId);
	
	void insertOpsVulnerabilityInstance(OpsVulnerabilityInstance vulInst);
	
	void updateOpsVulnerabilityInstance(OpsVulnerabilityInstance vulInst);

	List<OpsVulnerabilityInstance> getVulnerabilityInstanceList(OpsVulnerabilityInstanceQueryModel model);

	Integer getVulnerabilityInstanceListCount(OpsVulnerabilityInstanceQueryModel model);
	
	void markPreviousVulInstanceDataList2History(@Param("currScanCycle") String currScanCycle);

	/*
	 *  漏洞修复执行记录
	 * */

	void insertOpsVulRepairExecuteLog(OpsVulnerabilityRepairExecuteLog executeLog);

	OpsVulnerabilityRepairExecuteLog getVulRepairExecutelogByExecuteUuid(@Param("executeUuid") String executeUuid);

    List<OpsVulnerability> getVulnerabilityByName(@Param("name") String name);

	int batchInsertVulnerability(@Param("list") List<OpsVulnerability> addVulList);

    String getNewVulScanCycle();

	List<OpsVulnerabilityReportItem> getVulnerabilityReport(OpsVulnerabilityReportQuery queryParam);

    String getFlushSerialNum();

    List<OpsVulScanCycle> getScanCycleList();

	Map<String, Object> getVulNumStatisticsByVulInstanceId(@Param("hostIp") String hostIp, @Param("poolName") String poolName);

	int updateFlushSerialNum(@Param("flushSerialNum") String lastSerialNum);

    List<VulInstanceAgentInfo> getWaitRepairVulnerabilityInstanceIdList(@Param("vulId") String vulId);

    void flushOpsVulnerabilityIsFixed(@Param("vulId") String vulId, @Param("scanCycle") String scanCycle);

    List<OpsVulnerabilityNewReportItem> getVulNewReport(OpsVulNewReportQuery queryParam);

    List<VulReportDetailStatistics> queryVulReportDetailStatistics(OpsVulNewReportQuery queryParam);

	Integer queryVulReportItemListTotalSize(OpsVulNewReportQuery queryParam);

	List<VulReportDetailItem> queryVulReportItemList(OpsVulNewReportQuery queryParam);

	Integer getVulNewReportTotalSize(OpsVulNewReportQuery queryParam);
}
