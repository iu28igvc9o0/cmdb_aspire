package com.aspire.mirror.ops.controller;

import java.util.List;
import java.util.Map;

import com.aspire.mirror.common.util.BeanUtil;
import com.aspire.mirror.ops.api.domain.vulnerability.*;
import com.aspire.mirror.ops.biz.model.OpsVulnerabilityScanCycle;
import com.google.common.collect.Maps;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.aspire.mirror.ops.api.domain.GeneralResponse;
import com.aspire.mirror.ops.api.domain.PageListQueryResult;
import com.aspire.mirror.ops.api.service.IOpsVulnerabilityService;
import com.aspire.mirror.ops.biz.vulnerability.VulnerabilityBiz;
import com.aspire.mirror.ops.biz.vulnerability.VulnerabilityScanResultImportJob;

/**
 * @projectName: OpsVulnerabilityController
 * @description: ç±»
 * @author: luowenbo
 * @create: 2020-07-09 10:11
 **/
@RestController
@Slf4j
public class OpsVulnerabilityController implements IOpsVulnerabilityService {
	@Autowired
	private VulnerabilityBiz					vulnerabilityBiz;
	@Autowired
	private VulnerabilityScanResultImportJob	scanResultLoader;

    @Override
    public PageListQueryResult<OpsVulnerability> queryVulnerabilityList(@RequestBody OpsVulnerabilityQueryModel queryParam) {
        return vulnerabilityBiz.queryVulnerabilityList(queryParam);
    }

    @Override
    public OpsVulnerability getVulnerabilityById(@RequestParam("vulnerabilityId") String vulId) {
        return vulnerabilityBiz.getVulnerabilityById(vulId);
    }

    @Override
    public GeneralResponse updateVulnerability(@RequestBody OpsVulnerability vul) {
        return vulnerabilityBiz.updateOpsVulnerability(vul);
    }

    @Override
    public GeneralResponse saveVulnerability(@RequestBody OpsVulnerability vul) {
        return vulnerabilityBiz.saveVulnerability(vul);
    }

    @Override
    public List<Object> getRiskLevelList() {
        return vulnerabilityBiz.getRiskLevelList();
    }

    @Override
    public PageListQueryResult<OpsVulnerabilityInstance> queryVulnerabilityInstanceList(@RequestBody OpsVulnerabilityInstanceQueryModel queryParam) {
        return vulnerabilityBiz.queryVulnerabilityInstanceList(queryParam);
    }

    @Override
    public OpsVulnerabilityInstanceDetail getVulnerabilityInstanceDetailById(@RequestParam("vulInstanceId") Long vulInstanceId) {
        return vulnerabilityBiz.getVulnerabilityInstanceDetailById(vulInstanceId);
    }

    @Override
    public GeneralResponse batchExecuteVulnerabilityRepair(@RequestBody BatchExecuteVulnerabilityReqModel execVulModel) {
        return vulnerabilityBiz.batchExecuteVulnerabilityRepair(execVulModel);
    }

    @Override
    public GeneralResponse saveVulScanCycle(@RequestBody OpsVulScanCycle opsVulScanCycle) {
        try {
            OpsVulnerabilityScanCycle opsVulnerabilityScanCycle = new OpsVulnerabilityScanCycle();
            BeanUtils.copyProperties(opsVulScanCycle, opsVulnerabilityScanCycle);
            vulnerabilityBiz.saveScanCycleInfo(opsVulnerabilityScanCycle);
            return new GeneralResponse();
        } catch (Exception e) {
            log.error("OpsVulnerabilityController[saveVulScanCycle] is error!", e);
        }
        return new GeneralResponse(false);
    }

    @Override
    public List<VulReportDetailStatistics> queryVulReportDetailStatistics(@RequestBody OpsVulNewReportQuery queryParam) {
        return vulnerabilityBiz.queryVulReportDetailStatistics(queryParam);
    }

    @Override
    public PageListQueryResult<VulReportDetailItem> queryVulReportItemList(@RequestBody OpsVulNewReportQuery queryParam) {
        return vulnerabilityBiz.queryVulReportItemList(queryParam);
    }

    @Override
    public GeneralResponse updateVulInstance(@RequestBody OpsVulnerabilityInstance vulInstance) {
        return vulnerabilityBiz.updateOpsVulnerabilityInstance(vulInstance);
    }

    @Override
	@ResponseStatus(HttpStatus.OK)
	public GeneralResponse executeVulnerabilityRepair(@PathVariable("vulInstanceId") Long vulInstanceId, 
			@PathVariable("pipelineId") Long pipelineId, @PathVariable("operateType") String operateType) {
		return vulnerabilityBiz.executeVulnerabilityRepair(vulInstanceId, pipelineId, operateType);
	}
	
	@Override
	@ResponseStatus(HttpStatus.OK)
	public GeneralResponse loadCurrScanCycleVulnerabilityData() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				scanResultLoader.runJob();
			}
		}).start();
		return new GeneralResponse();
	}

    @Override
    public Map<String, Integer> addBatchVulnerability(@RequestBody BatchVulnerabilityRequest batchVulnerabilityRequest) {
        if (batchVulnerabilityRequest == null || CollectionUtils.isEmpty(batchVulnerabilityRequest.getVulList())) {
            log.error("OpsVulnerabilityController[addBatchVulnerability] param is invalid");
            return Maps.newHashMap();
        }
        return vulnerabilityBiz.addBatchVulnerability(batchVulnerabilityRequest.getVulList());
    }

    @Override
    public GeneralResponse saveVulnerabilityInstance(@RequestBody OpsVulnerabilityInstance vulInstance) {
        if (vulInstance == null) {
            log.error("OpsVulnerabilityController[saveVulnerabilityInstance] param is null");
            return new GeneralResponse(false);
        }
        String scanCycle = vulnerabilityBiz.getNewVulScanCycle();
        vulInstance.setScanCycle(scanCycle);
        vulnerabilityBiz.saveOpsVulnerabilityInstance(vulInstance);
         return new GeneralResponse();
    }

    @Override
    public List<OpsVulPoolCodeNameMap> loadPoolCodeNameMapList() {
        return vulnerabilityBiz.loadPoolCodeNameMapList();
    }

    @Override
    public List<OpsVulScanCycle> getScanCycleList() {
        return vulnerabilityBiz.getScanCycleList();
    }

    @Override
    public List<OpsVulnerabilityReportItem> vulnerabilityReport(@RequestBody OpsVulnerabilityReportQuery queryParam) {
        return vulnerabilityBiz.getVulnerabilityReport(queryParam);
    }

    public PageListQueryResult<OpsVulnerabilityNewReportItem> vulNewReport(@RequestBody OpsVulNewReportQuery queryParam) {
        return vulnerabilityBiz.getVulNewReport(queryParam);
    }
}
